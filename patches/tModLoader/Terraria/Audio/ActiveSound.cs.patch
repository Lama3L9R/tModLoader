--- src/TerrariaNetCore/Terraria/Audio/ActiveSound.cs
+++ src/tModLoader/Terraria/Audio/ActiveSound.cs
@@ -1,16 +_,18 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Audio;
+using System;
+using System.Threading.Tasks;
 
 namespace Terraria.Audio
 {
 	public class ActiveSound
 	{
 		public delegate bool LoopedPlayCondition();
 
-		public readonly bool IsGlobal;
-		public Vector2 Position;
+		//public readonly bool IsGlobal;
+		public Vector2? Position; //TML: Made nullable
 		public float Volume;
 		public float Pitch;
 		public LoopedPlayCondition Condition;
 
 		public SoundEffectInstance Sound {
@@ -23,15 +_,19 @@
 			private set;
 		}
 
-		public bool IsPlaying => Sound.State == SoundState.Playing;
+		public bool IsPlaying => Sound?.IsDisposed == false && Sound.State == SoundState.Playing;
 
-		public ActiveSound(SoundStyle style, Vector2 position) {
+		//TML: Position parameter made nullable.
+		public ActiveSound(SoundStyle style, Vector2? position = null) {
 			Position = position;
 			Volume = 1f;
 			Pitch = style.PitchVariance;
-			IsGlobal = false;
+			//IsGlobal = false;
 			Style = style;
+			
 			Play();
 		}
 
+		//TML: Merged with the above constructor.
+		/*
 		public ActiveSound(SoundStyle style) {
@@ -51,11 +_,18 @@
 			Style = style;
 			PlayLooped(condition);
 		}
+		*/
 
 		private void Play() {
+			if (!Program.IsMainThread) {
+				RunOnMainThreadAndWait(Play);
+				return;
+			}
+
 			SoundEffectInstance soundEffectInstance = Style.GetRandomSound().CreateInstance();
 			soundEffectInstance.Pitch += Style.GetRandomPitch();
 			Pitch = soundEffectInstance.Pitch;
+			soundEffectInstance.IsLooped = Style.IsLooped;
 			soundEffectInstance.Play();
 			SoundInstanceGarbageCollector.Track(soundEffectInstance);
 			Sound = soundEffectInstance;
@@ -75,36 +_,60 @@
 		}
 
 		public void Stop() {
+			if (!Program.IsMainThread) {
+				RunOnMainThreadAndWait(Stop);
+				return;
+			}
+			
 			if (Sound != null)
 				Sound.Stop();
 		}
 
 		public void Pause() {
+			if (!Program.IsMainThread) {
+				RunOnMainThreadAndWait(Pause);
+				return;
+			}
+			
 			if (Sound != null && Sound.State == SoundState.Playing)
 				Sound.Pause();
 		}
 
 		public void Resume() {
+			if (!Program.IsMainThread) {
+				RunOnMainThreadAndWait(Resume);
+				return;
+			}
+			
 			if (Sound != null && Sound.State == SoundState.Paused)
 				Sound.Resume();
 		}
 
 		public void Update() {
 			if (Sound == null)
 				return;
 
+			if (!Program.IsMainThread) {
+				RunOnMainThreadAndWait(Update);
+				return;
+			}
+
 			if (Condition != null && !Condition()) {
 				Sound.Stop(immediate: true);
 				return;
 			}
 
+			if (Sound.IsDisposed)
+				return;
+
 			Vector2 value = Main.screenPosition + new Vector2(Main.screenWidth / 2, Main.screenHeight / 2);
 			float num = 1f;
-			if (!IsGlobal) {
-				float value2 = (Position.X - value.X) / ((float)Main.screenWidth * 0.5f);
+			//if (!IsGlobal) {
+			if (Position.HasValue) {
+				float value2 = (Position.Value.X - value.X) / ((float)Main.screenWidth * 0.5f);
 				value2 = MathHelper.Clamp(value2, -1f, 1f);
 				Sound.Pan = value2;
-				float num2 = Vector2.Distance(Position, value);
+				float num2 = Vector2.Distance(Position.Value, value);
 				num = 1f - num2 / ((float)Main.screenWidth * 1.5f);
 			}
 
@@ -115,6 +_,12 @@
 					break;
 				case SoundType.Ambient:
 					num *= Main.ambientVolume;
+
+					// Added by TML to mimic the behavior of the LegacySoundPlayer code.
+					if (Main.gameInactive) {
+						num = 0f;
+					}
+
 					break;
 				case SoundType.Music:
 					num *= Main.musicVolume;
@@ -125,5 +_,9 @@
 			Sound.Volume = num;
 			Sound.Pitch = Pitch;
 		}
+
+		// Added by TML.
+		// As the name states, runs code on the main thread and waits for it to finish.
+		private static void RunOnMainThreadAndWait(Action action) => Main.RunOnMainThread(action).GetAwaiter().GetResult();
 	}
 }
