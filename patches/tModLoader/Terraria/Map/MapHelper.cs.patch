--- src/TerrariaNetCore/Terraria/Map/MapHelper.cs
+++ src/tModLoader/Terraria/Map/MapHelper.cs
@@ -5,6 +_,8 @@
 using System.IO;
 using System.Threading;
 using Terraria.IO;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Social;
 using Terraria.Utilities;
 
@@ -126,7 +_,8 @@
 		private static ushort dirtPosition;
 		private static ushort rockPosition;
 		private static ushort hellPosition;
+		internal static ushort modPosition;
-		private static Color[] colorLookup;
+		internal static Color[] colorLookup;
 		private static ushort[] snowTypes;
 		private static ushort wallRangeStart;
 		private static ushort wallRangeEnd;
@@ -1593,6 +_,7 @@
 
 			hellPosition = num20;
 			colorLookup[num20] = color10;
+			modPosition = (ushort)(num20 + 1); // Added by TML.
 			snowTypes = new ushort[6];
 			snowTypes[0] = tileLookup[147];
 			snowTypes[1] = tileLookup[161];
@@ -1734,7 +_,7 @@
 					int num5 = tile.liquidType();
 					num3 = liquidPosition + num5;
 				}
-				else if (!tile.invisibleWall() && tile.wall > 0 && tile.wall < 347) {
+				else if (!tile.invisibleWall() && tile.wall > 0 && tile.wall < WallLoader.WallCount) {
 					int wall = tile.wall;
 					num3 = wallLookup[wall];
 					num = tile.wallColor();
@@ -1763,55 +_,59 @@
 			if (num3 == 0) {
 				if ((double)j < Main.worldSurface) {
 					if (Main.remixWorld) {
+						// Patch note: num2, used below.
 						num2 = 5;
 						num3 = 100;
 					}
 					else {
 						int num6 = (byte)(255.0 * ((double)j / Main.worldSurface));
 						num3 = skyPosition + num6;
 						num2 = 255;
 						num = 0;
 					}
 				}
 				else if (j < Main.UnderworldLayer) {
 					num = 0;
 					byte b = 0;
 					float num7 = Main.screenPosition.X / 16f - 5f;
 					float num8 = (Main.screenPosition.X + (float)Main.screenWidth) / 16f + 5f;
 					float num9 = Main.screenPosition.Y / 16f - 5f;
 					float num10 = (Main.screenPosition.Y + (float)Main.screenHeight) / 16f + 5f;
 					if (((float)i < num7 || (float)i > num8 || (float)j < num9 || (float)j > num10) && i > 40 && i < Main.maxTilesX - 40 && j > 40 && j < Main.maxTilesY - 40) {
 						for (int k = i - 36; k <= i + 30; k += 10) {
 							for (int l = j - 36; l <= j + 30; l += 10) {
 								int type = Main.Map[k, l].Type;
 								for (int m = 0; m < snowTypes.Length; m++) {
 									if (snowTypes[m] == type) {
 										b = byte.MaxValue;
 										k = i + 31;
 										l = j + 31;
 										break;
 									}
 								}
 							}
 						}
 					}
 					else {
 						float num11 = (float)Main.SceneMetrics.SnowTileCount / (float)SceneMetrics.SnowTileMax;
 						num11 *= 255f;
 						if (num11 > 255f)
 							num11 = 255f;
 
 						b = (byte)num11;
 					}
 
 					num3 = ((!((double)j < Main.rockLayer)) ? (rockPosition + b) : (dirtPosition + b));
 				}
+				// Extra patch context.
 				else {
 					num3 = hellPosition;
 				}
 			}
 
-			return MapTile.Create((ushort)(num3 + baseOption), (byte)num2, (byte)num);
+			ushort mapType = (ushort)(num3 + baseOption);
+			MapLoader.ModMapOption(ref mapType, i, j);
+			return MapTile.Create(mapType, (byte)num2, (byte)num);
 		}
 
 		public static void GetTileBaseOption(int x, int y, int tileType, Tile tileCache, ref int baseOption) {
@@ -2569,7 +_,10 @@
 								byte b6 = 0;
 								int num7;
 								ushort num8;
+								/*
 								if (mapTile.Light <= 18) {
+								*/
+								if (mapTile.Light <= 18 || mapTile.Type >= modPosition) {
 									flag2 = false;
 									flag = false;
 									num7 = 0;
@@ -2727,7 +_,9 @@
 
 						deflateStream.Dispose();
 						FileUtilities.WriteAllBytes(text, memoryStream.ToArray(), isCloudSave);
+						//patch file: text
 					}
+					MapIO.WriteModFile(text, isCloudSave);
 				}
 			}
 
